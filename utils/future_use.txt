# For fields that are identifiers
        if field in [2, 3, 12]:
            field_bits = [6, 8, 38, 42, 50, 60, 61, 89, 116, 128, 137, 143, 148]
            # Compute how much that field differs from that field's mean of other messages
            X.append(np.mean(without)-message_decoded[message_idx,field]/np.power(2,field_bits[field]-field_bits[field-1]))
        # ---------- For fields that are related to positon, speed and course -------
        if field in [4, 5, 7, 8, 9]: 
            # Find the previous message
            indices = np.where(np.array(idx) == np.array(idx)[message_idx])[0].tolist()
            idx_previous = indices[indices.index(message_idx) - 1]
            if idx_previous > message_idx or idx_previous == message_idx:
                X.append(0)
            else:
                # Compute the difference in longitude
                delta_lon = abs(message_decoded[message_idx, 7]-message_decoded[idx_previous, 7])
		coeff_lon = 111320 * np.cos(message_decoded[message_idx, 8]*np.pi/180)
		delta_lon = delta_lon * coeff_lon
                # Compute the difference in latitude
                delta_lat = abs(message_decoded[message_idx, 8]-message_decoded[idx_previous, 8])
		coeff_lat = 111320
		delt_lat = delta_lat * coeff_lat
                time = timestamp[message_idx]-timestamp[idx_previous]
                if field == 4: # rate of turns
                    # Computed rate based on COG
                    cog_diff = message_decoded[message_idx, 4]-message_decoded[idx_previous, 4]
                    if time.seconds: rate = cog_diff/(time.seconds/60) # in deg/min
                    else: rate = 0
                    rate = np.sign(rate) * 4.733 * np.sqrt(abs(rate))
                    X.append(np.abs(rate - message_decoded[message_idx, 4])/708)
                if field == 5: # speed over ground
                    # Total distance of that ship (in m)
                    dist = np.sqrt(delta_lat*delta_lat + delta_lon*delta_lon)
                    # Possible speed
                    if time.seconds: speed = dist/(time.seconds) # in m/s
                    else: speed = 0
                    speed = np.round(speed/0.5144, 1) # in knots
                    X.append(np.abs(speed - message_decoded[message_idx, 5])/102.2)
                elif field == 7 or field == 8:
                    # Real distance (in m)
                    dist = message_decoded[message_idx, 5] * 0.5144 * time.seconds
                    # Computed
                    if field == 7: # longitude
                        long = np.sqrt(abs(dist*dist - delta_lat*delta_lat))
                        X.append(np.abs(long - delta_lon)/180)
                    else: # field == 8 - latitude
                        lat = np.sqrt(abs(dist*dist - delta_lon*delta_lon))
                        X.append(np.abs(lat - delta_lat)/90)
                elif field == 9: # course over ground
                    if delta_lat > 0: 
                        course = np.arctan(delta_lon/delta_lat) * 180 / np.pi
                    elif delta_lat < 0:
                        course = np.sign(delta_lon) * 180 - np.arctan(delta_lon/delta_lat)*180/np.pi
                    else: course = np.sign(delta_lon) * 90
                    if course < 0: course = course + 360
                    X.append(np.abs(course - message_decoded[message_idx, 9])/360)